// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/dbnode/generated/proto/schema_test/test1.proto

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package schematest is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/dbnode/generated/proto/schema_test/test1.proto

	It has these top-level messages:
		TestMessage
*/
package schematest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TestMessage struct {
	AInt32    int32   `protobuf:"varint,1,opt,name=a_int32,json=aInt32,proto3" json:"a_int32,omitempty"`
	AInt64    int64   `protobuf:"varint,2,opt,name=a_int64,json=aInt64,proto3" json:"a_int64,omitempty"`
	AUint32   uint32  `protobuf:"varint,3,opt,name=a_uint32,json=aUint32,proto3" json:"a_uint32,omitempty"`
	AUint64   uint64  `protobuf:"varint,4,opt,name=a_uint64,json=aUint64,proto3" json:"a_uint64,omitempty"`
	ASint32   int32   `protobuf:"zigzag32,5,opt,name=a_sint32,json=aSint32,proto3" json:"a_sint32,omitempty"`
	ASint64   int64   `protobuf:"zigzag64,6,opt,name=a_sint64,json=aSint64,proto3" json:"a_sint64,omitempty"`
	AFixed32  uint32  `protobuf:"fixed32,7,opt,name=a_fixed32,json=aFixed32,proto3" json:"a_fixed32,omitempty"`
	AFixed64  uint64  `protobuf:"fixed64,8,opt,name=a_fixed64,json=aFixed64,proto3" json:"a_fixed64,omitempty"`
	ASfixed32 int32   `protobuf:"fixed32,9,opt,name=a_sfixed32,json=aSfixed32,proto3" json:"a_sfixed32,omitempty"`
	ASfixed64 int64   `protobuf:"fixed64,10,opt,name=a_sfixed64,json=aSfixed64,proto3" json:"a_sfixed64,omitempty"`
	ABool     bool    `protobuf:"varint,11,opt,name=a_bool,json=aBool,proto3" json:"a_bool,omitempty"`
	AString   string  `protobuf:"bytes,12,opt,name=a_string,json=aString,proto3" json:"a_string,omitempty"`
	ABytes    []byte  `protobuf:"bytes,13,opt,name=a_bytes,json=aBytes,proto3" json:"a_bytes,omitempty"`
	ADouble   float64 `protobuf:"fixed64,14,opt,name=a_double,json=aDouble,proto3" json:"a_double,omitempty"`
	AFloat    float32 `protobuf:"fixed32,15,opt,name=a_float,json=aFloat,proto3" json:"a_float,omitempty"`
}

func (m *TestMessage) Reset()                    { *m = TestMessage{} }
func (m *TestMessage) String() string            { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()               {}
func (*TestMessage) Descriptor() ([]byte, []int) { return fileDescriptorTest1, []int{0} }

func (m *TestMessage) GetAInt32() int32 {
	if m != nil {
		return m.AInt32
	}
	return 0
}

func (m *TestMessage) GetAInt64() int64 {
	if m != nil {
		return m.AInt64
	}
	return 0
}

func (m *TestMessage) GetAUint32() uint32 {
	if m != nil {
		return m.AUint32
	}
	return 0
}

func (m *TestMessage) GetAUint64() uint64 {
	if m != nil {
		return m.AUint64
	}
	return 0
}

func (m *TestMessage) GetASint32() int32 {
	if m != nil {
		return m.ASint32
	}
	return 0
}

func (m *TestMessage) GetASint64() int64 {
	if m != nil {
		return m.ASint64
	}
	return 0
}

func (m *TestMessage) GetAFixed32() uint32 {
	if m != nil {
		return m.AFixed32
	}
	return 0
}

func (m *TestMessage) GetAFixed64() uint64 {
	if m != nil {
		return m.AFixed64
	}
	return 0
}

func (m *TestMessage) GetASfixed32() int32 {
	if m != nil {
		return m.ASfixed32
	}
	return 0
}

func (m *TestMessage) GetASfixed64() int64 {
	if m != nil {
		return m.ASfixed64
	}
	return 0
}

func (m *TestMessage) GetABool() bool {
	if m != nil {
		return m.ABool
	}
	return false
}

func (m *TestMessage) GetAString() string {
	if m != nil {
		return m.AString
	}
	return ""
}

func (m *TestMessage) GetABytes() []byte {
	if m != nil {
		return m.ABytes
	}
	return nil
}

func (m *TestMessage) GetADouble() float64 {
	if m != nil {
		return m.ADouble
	}
	return 0
}

func (m *TestMessage) GetAFloat() float32 {
	if m != nil {
		return m.AFloat
	}
	return 0
}

func init() {
	proto.RegisterType((*TestMessage)(nil), "schematest.TestMessage")
}
func (m *TestMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AInt32 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTest1(dAtA, i, uint64(m.AInt32))
	}
	if m.AInt64 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTest1(dAtA, i, uint64(m.AInt64))
	}
	if m.AUint32 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTest1(dAtA, i, uint64(m.AUint32))
	}
	if m.AUint64 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTest1(dAtA, i, uint64(m.AUint64))
	}
	if m.ASint32 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTest1(dAtA, i, uint64((uint32(m.ASint32)<<1)^uint32((m.ASint32>>31))))
	}
	if m.ASint64 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTest1(dAtA, i, uint64((uint64(m.ASint64)<<1)^uint64((m.ASint64>>63))))
	}
	if m.AFixed32 != 0 {
		dAtA[i] = 0x3d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.AFixed32))
		i += 4
	}
	if m.AFixed64 != 0 {
		dAtA[i] = 0x41
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AFixed64))
		i += 8
	}
	if m.ASfixed32 != 0 {
		dAtA[i] = 0x4d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ASfixed32))
		i += 4
	}
	if m.ASfixed64 != 0 {
		dAtA[i] = 0x51
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ASfixed64))
		i += 8
	}
	if m.ABool {
		dAtA[i] = 0x58
		i++
		if m.ABool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AString) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTest1(dAtA, i, uint64(len(m.AString)))
		i += copy(dAtA[i:], m.AString)
	}
	if len(m.ABytes) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTest1(dAtA, i, uint64(len(m.ABytes)))
		i += copy(dAtA[i:], m.ABytes)
	}
	if m.ADouble != 0 {
		dAtA[i] = 0x71
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ADouble))))
		i += 8
	}
	if m.AFloat != 0 {
		dAtA[i] = 0x7d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AFloat))))
		i += 4
	}
	return i, nil
}

func encodeVarintTest1(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestMessage) Size() (n int) {
	var l int
	_ = l
	if m.AInt32 != 0 {
		n += 1 + sovTest1(uint64(m.AInt32))
	}
	if m.AInt64 != 0 {
		n += 1 + sovTest1(uint64(m.AInt64))
	}
	if m.AUint32 != 0 {
		n += 1 + sovTest1(uint64(m.AUint32))
	}
	if m.AUint64 != 0 {
		n += 1 + sovTest1(uint64(m.AUint64))
	}
	if m.ASint32 != 0 {
		n += 1 + sozTest1(uint64(m.ASint32))
	}
	if m.ASint64 != 0 {
		n += 1 + sozTest1(uint64(m.ASint64))
	}
	if m.AFixed32 != 0 {
		n += 5
	}
	if m.AFixed64 != 0 {
		n += 9
	}
	if m.ASfixed32 != 0 {
		n += 5
	}
	if m.ASfixed64 != 0 {
		n += 9
	}
	if m.ABool {
		n += 2
	}
	l = len(m.AString)
	if l > 0 {
		n += 1 + l + sovTest1(uint64(l))
	}
	l = len(m.ABytes)
	if l > 0 {
		n += 1 + l + sovTest1(uint64(l))
	}
	if m.ADouble != 0 {
		n += 9
	}
	if m.AFloat != 0 {
		n += 5
	}
	return n
}

func sovTest1(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTest1(x uint64) (n int) {
	return sovTest1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AInt32", wireType)
			}
			m.AInt32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AInt32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AInt64", wireType)
			}
			m.AInt64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AInt64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AUint32", wireType)
			}
			m.AUint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AUint32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AUint64", wireType)
			}
			m.AUint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AUint64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ASint32 = v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASint64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ASint64 = int64(v)
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFixed32", wireType)
			}
			m.AFixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.AFixed32 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFixed64", wireType)
			}
			m.AFixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AFixed64 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASfixed32", wireType)
			}
			m.ASfixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ASfixed32 = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASfixed64", wireType)
			}
			m.ASfixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ASfixed64 = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ABool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ABool = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest1
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ABytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest1
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ABytes = append(m.ABytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ABytes == nil {
				m.ABytes = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADouble", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ADouble = float64(math.Float64frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFloat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AFloat = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTest1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTest1
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTest1
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTest1(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTest1 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest1   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/dbnode/generated/proto/schema_test/test1.proto", fileDescriptorTest1)
}

var fileDescriptorTest1 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4f, 0x6e, 0xd4, 0x30,
	0x14, 0x87, 0x79, 0x9d, 0x4e, 0xfe, 0xb8, 0x2d, 0x2d, 0x91, 0x10, 0x46, 0x88, 0xc8, 0x62, 0xe5,
	0x55, 0x2d, 0x1a, 0xcb, 0x07, 0x18, 0x41, 0x25, 0x16, 0x6c, 0x5c, 0x58, 0x47, 0x2f, 0x13, 0x37,
	0x8d, 0x94, 0xc4, 0x28, 0xf6, 0x48, 0x70, 0x0b, 0xce, 0xc0, 0x69, 0x58, 0x72, 0x04, 0x34, 0x5c,
	0x04, 0x25, 0xce, 0xb4, 0xb3, 0x89, 0xf4, 0xfd, 0x3e, 0x7d, 0xd2, 0x53, 0x4c, 0x3e, 0x36, 0xad,
	0x7f, 0xd8, 0x55, 0xd7, 0x5b, 0xdb, 0x8b, 0xbe, 0xa8, 0x2b, 0xd1, 0x17, 0xc2, 0x8d, 0x5b, 0x51,
	0x57, 0x83, 0xad, 0x8d, 0x68, 0xcc, 0x60, 0x46, 0xf4, 0xa6, 0x16, 0xdf, 0x46, 0xeb, 0xad, 0x70,
	0xdb, 0x07, 0xd3, 0x63, 0xe9, 0x8d, 0xf3, 0x62, 0xfa, 0xbc, 0xbf, 0x9e, 0xf7, 0x8c, 0x04, 0x31,
	0x4d, 0xef, 0x7e, 0xad, 0xc8, 0xd9, 0x17, 0xe3, 0xfc, 0x67, 0xe3, 0x1c, 0x36, 0x26, 0x7b, 0x45,
	0x62, 0x2c, 0xdb, 0xc1, 0x17, 0x37, 0x14, 0x18, 0xf0, 0xb5, 0x8e, 0xf0, 0xd3, 0x44, 0x8f, 0x42,
	0x49, 0x7a, 0xc2, 0x80, 0xaf, 0x82, 0x50, 0x32, 0x7b, 0x4d, 0x12, 0x2c, 0x77, 0x21, 0x59, 0x31,
	0xe0, 0x17, 0x3a, 0xc6, 0xaf, 0x33, 0x3e, 0x29, 0x25, 0xe9, 0x29, 0x03, 0x7e, 0xba, 0xa8, 0x43,
	0xe5, 0x42, 0xb5, 0x66, 0xc0, 0x5f, 0xe8, 0x18, 0xef, 0x8e, 0x2a, 0x17, 0xaa, 0x88, 0x01, 0xcf,
	0x16, 0xa5, 0x64, 0xf6, 0x86, 0xa4, 0x58, 0xde, 0xb7, 0xdf, 0x4d, 0x5d, 0xdc, 0xd0, 0x98, 0x01,
	0x8f, 0x75, 0x82, 0xb7, 0x81, 0x8f, 0xa4, 0x92, 0x34, 0x61, 0xc0, 0xa3, 0x83, 0x54, 0x32, 0x7b,
	0x4b, 0x08, 0x96, 0xee, 0x90, 0xa6, 0x0c, 0xf8, 0xa5, 0x4e, 0xf1, 0x6e, 0x19, 0x8e, 0xb5, 0x92,
	0x94, 0x30, 0xe0, 0x57, 0x8f, 0x5a, 0xc9, 0xec, 0x25, 0x89, 0xb0, 0xac, 0xac, 0xed, 0xe8, 0x19,
	0x03, 0x9e, 0xe8, 0x35, 0x6e, 0xac, 0xed, 0x96, 0x4b, 0xfd, 0xd8, 0x0e, 0x0d, 0x3d, 0x67, 0xc0,
	0xd3, 0xe9, 0xd2, 0x19, 0xc3, 0xef, 0xaa, 0x7e, 0x78, 0xe3, 0xe8, 0x05, 0x03, 0x7e, 0xae, 0x23,
	0xdc, 0x4c, 0x14, 0x9a, 0xda, 0xee, 0xaa, 0xce, 0xd0, 0xe7, 0x0c, 0x38, 0xe8, 0x18, 0x3f, 0xcc,
	0x18, 0x9a, 0xfb, 0xce, 0xa2, 0xa7, 0x97, 0x0c, 0xf8, 0x89, 0x8e, 0xf0, 0x76, 0xa2, 0xcd, 0xd5,
	0xef, 0x7d, 0x0e, 0x7f, 0xf6, 0x39, 0xfc, 0xdd, 0xe7, 0xf0, 0xf3, 0x5f, 0xfe, 0xac, 0x8a, 0xe6,
	0x97, 0x2c, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x63, 0x5c, 0x0c, 0x12, 0x02, 0x00, 0x00,
}
