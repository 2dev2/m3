// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/dbnode/generated/proto/schematest/main.proto

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package schematest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestMessage_Corpus int32

const (
	TestMessage_UNIVERSAL TestMessage_Corpus = 0
	TestMessage_WEB       TestMessage_Corpus = 1
	TestMessage_IMAGES    TestMessage_Corpus = 2
	TestMessage_LOCAL     TestMessage_Corpus = 3
	TestMessage_NEWS      TestMessage_Corpus = 4
	TestMessage_PRODUCTS  TestMessage_Corpus = 5
	TestMessage_VIDEO     TestMessage_Corpus = 6
)

var TestMessage_Corpus_name = map[int32]string{
	0: "UNIVERSAL",
	1: "WEB",
	2: "IMAGES",
	3: "LOCAL",
	4: "NEWS",
	5: "PRODUCTS",
	6: "VIDEO",
}
var TestMessage_Corpus_value = map[string]int32{
	"UNIVERSAL": 0,
	"WEB":       1,
	"IMAGES":    2,
	"LOCAL":     3,
	"NEWS":      4,
	"PRODUCTS":  5,
	"VIDEO":     6,
}

func (x TestMessage_Corpus) String() string {
	return proto.EnumName(TestMessage_Corpus_name, int32(x))
}
func (TestMessage_Corpus) EnumDescriptor() ([]byte, []int) { return fileDescriptorMain, []int{0, 0} }

type TestMessage struct {
	AInt32            int32                     `protobuf:"varint,1,opt,name=a_int32,json=aInt32,proto3" json:"a_int32,omitempty"`
	AInt64            int64                     `protobuf:"varint,2,opt,name=a_int64,json=aInt64,proto3" json:"a_int64,omitempty"`
	AUint32           uint32                    `protobuf:"varint,3,opt,name=a_uint32,json=aUint32,proto3" json:"a_uint32,omitempty"`
	AUint64           uint64                    `protobuf:"varint,4,opt,name=a_uint64,json=aUint64,proto3" json:"a_uint64,omitempty"`
	ASint32           int32                     `protobuf:"zigzag32,5,opt,name=a_sint32,json=aSint32,proto3" json:"a_sint32,omitempty"`
	ASint64           int64                     `protobuf:"zigzag64,6,opt,name=a_sint64,json=aSint64,proto3" json:"a_sint64,omitempty"`
	AFixed32          uint32                    `protobuf:"fixed32,7,opt,name=a_fixed32,json=aFixed32,proto3" json:"a_fixed32,omitempty"`
	AFixed64          uint64                    `protobuf:"fixed64,8,opt,name=a_fixed64,json=aFixed64,proto3" json:"a_fixed64,omitempty"`
	ASfixed32         int32                     `protobuf:"fixed32,9,opt,name=a_sfixed32,json=aSfixed32,proto3" json:"a_sfixed32,omitempty"`
	ASfixed64         int64                     `protobuf:"fixed64,10,opt,name=a_sfixed64,json=aSfixed64,proto3" json:"a_sfixed64,omitempty"`
	ABool             bool                      `protobuf:"varint,11,opt,name=a_bool,json=aBool,proto3" json:"a_bool,omitempty"`
	AString           string                    `protobuf:"bytes,12,opt,name=a_string,json=aString,proto3" json:"a_string,omitempty"`
	ABytes            []byte                    `protobuf:"bytes,13,opt,name=a_bytes,json=aBytes,proto3" json:"a_bytes,omitempty"`
	ADouble           float64                   `protobuf:"fixed64,14,opt,name=a_double,json=aDouble,proto3" json:"a_double,omitempty"`
	AFloat            float32                   `protobuf:"fixed32,15,opt,name=a_float,json=aFloat,proto3" json:"a_float,omitempty"`
	AnArrayString     []string                  `protobuf:"bytes,16,rep,name=an_array_string,json=anArrayString" json:"an_array_string,omitempty"`
	AMapOfInt32       map[string]int32          `protobuf:"bytes,17,rep,name=a_map_of_int32,json=aMapOfInt32" json:"a_map_of_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AMapOfNested      map[string]*NestedMessage `protobuf:"bytes,18,rep,name=a_map_of_nested,json=aMapOfNested" json:"a_map_of_nested,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	ANestedMessage    *NestedMessage            `protobuf:"bytes,19,opt,name=a_nested_message,json=aNestedMessage" json:"a_nested_message,omitempty"`
	AnImportedMessage *ImportedMessage          `protobuf:"bytes,20,opt,name=an_imported_message,json=anImportedMessage" json:"an_imported_message,omitempty"`
	AnEnum            TestMessage_Corpus        `protobuf:"varint,21,opt,name=an_enum,json=anEnum,proto3,enum=schematest.TestMessage_Corpus" json:"an_enum,omitempty"`
}

func (m *TestMessage) Reset()                    { *m = TestMessage{} }
func (m *TestMessage) String() string            { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()               {}
func (*TestMessage) Descriptor() ([]byte, []int) { return fileDescriptorMain, []int{0} }

func (m *TestMessage) GetAInt32() int32 {
	if m != nil {
		return m.AInt32
	}
	return 0
}

func (m *TestMessage) GetAInt64() int64 {
	if m != nil {
		return m.AInt64
	}
	return 0
}

func (m *TestMessage) GetAUint32() uint32 {
	if m != nil {
		return m.AUint32
	}
	return 0
}

func (m *TestMessage) GetAUint64() uint64 {
	if m != nil {
		return m.AUint64
	}
	return 0
}

func (m *TestMessage) GetASint32() int32 {
	if m != nil {
		return m.ASint32
	}
	return 0
}

func (m *TestMessage) GetASint64() int64 {
	if m != nil {
		return m.ASint64
	}
	return 0
}

func (m *TestMessage) GetAFixed32() uint32 {
	if m != nil {
		return m.AFixed32
	}
	return 0
}

func (m *TestMessage) GetAFixed64() uint64 {
	if m != nil {
		return m.AFixed64
	}
	return 0
}

func (m *TestMessage) GetASfixed32() int32 {
	if m != nil {
		return m.ASfixed32
	}
	return 0
}

func (m *TestMessage) GetASfixed64() int64 {
	if m != nil {
		return m.ASfixed64
	}
	return 0
}

func (m *TestMessage) GetABool() bool {
	if m != nil {
		return m.ABool
	}
	return false
}

func (m *TestMessage) GetAString() string {
	if m != nil {
		return m.AString
	}
	return ""
}

func (m *TestMessage) GetABytes() []byte {
	if m != nil {
		return m.ABytes
	}
	return nil
}

func (m *TestMessage) GetADouble() float64 {
	if m != nil {
		return m.ADouble
	}
	return 0
}

func (m *TestMessage) GetAFloat() float32 {
	if m != nil {
		return m.AFloat
	}
	return 0
}

func (m *TestMessage) GetAnArrayString() []string {
	if m != nil {
		return m.AnArrayString
	}
	return nil
}

func (m *TestMessage) GetAMapOfInt32() map[string]int32 {
	if m != nil {
		return m.AMapOfInt32
	}
	return nil
}

func (m *TestMessage) GetAMapOfNested() map[string]*NestedMessage {
	if m != nil {
		return m.AMapOfNested
	}
	return nil
}

func (m *TestMessage) GetANestedMessage() *NestedMessage {
	if m != nil {
		return m.ANestedMessage
	}
	return nil
}

func (m *TestMessage) GetAnImportedMessage() *ImportedMessage {
	if m != nil {
		return m.AnImportedMessage
	}
	return nil
}

func (m *TestMessage) GetAnEnum() TestMessage_Corpus {
	if m != nil {
		return m.AnEnum
	}
	return TestMessage_UNIVERSAL
}

type NestedMessage struct {
	AInt32    int32   `protobuf:"varint,1,opt,name=a_int32,json=aInt32,proto3" json:"a_int32,omitempty"`
	AInt64    int64   `protobuf:"varint,2,opt,name=a_int64,json=aInt64,proto3" json:"a_int64,omitempty"`
	AUint32   uint32  `protobuf:"varint,3,opt,name=a_uint32,json=aUint32,proto3" json:"a_uint32,omitempty"`
	AUint64   uint64  `protobuf:"varint,4,opt,name=a_uint64,json=aUint64,proto3" json:"a_uint64,omitempty"`
	ASint32   int32   `protobuf:"zigzag32,5,opt,name=a_sint32,json=aSint32,proto3" json:"a_sint32,omitempty"`
	ASint64   int64   `protobuf:"zigzag64,6,opt,name=a_sint64,json=aSint64,proto3" json:"a_sint64,omitempty"`
	AFixed32  uint32  `protobuf:"fixed32,7,opt,name=a_fixed32,json=aFixed32,proto3" json:"a_fixed32,omitempty"`
	AFixed64  uint64  `protobuf:"fixed64,8,opt,name=a_fixed64,json=aFixed64,proto3" json:"a_fixed64,omitempty"`
	ASfixed32 int32   `protobuf:"fixed32,9,opt,name=a_sfixed32,json=aSfixed32,proto3" json:"a_sfixed32,omitempty"`
	ASfixed64 int64   `protobuf:"fixed64,10,opt,name=a_sfixed64,json=aSfixed64,proto3" json:"a_sfixed64,omitempty"`
	ABool     bool    `protobuf:"varint,11,opt,name=a_bool,json=aBool,proto3" json:"a_bool,omitempty"`
	AString   string  `protobuf:"bytes,12,opt,name=a_string,json=aString,proto3" json:"a_string,omitempty"`
	ABytes    []byte  `protobuf:"bytes,13,opt,name=a_bytes,json=aBytes,proto3" json:"a_bytes,omitempty"`
	ADouble   float64 `protobuf:"fixed64,14,opt,name=a_double,json=aDouble,proto3" json:"a_double,omitempty"`
	AFloat    float32 `protobuf:"fixed32,15,opt,name=a_float,json=aFloat,proto3" json:"a_float,omitempty"`
}

func (m *NestedMessage) Reset()                    { *m = NestedMessage{} }
func (m *NestedMessage) String() string            { return proto.CompactTextString(m) }
func (*NestedMessage) ProtoMessage()               {}
func (*NestedMessage) Descriptor() ([]byte, []int) { return fileDescriptorMain, []int{1} }

func (m *NestedMessage) GetAInt32() int32 {
	if m != nil {
		return m.AInt32
	}
	return 0
}

func (m *NestedMessage) GetAInt64() int64 {
	if m != nil {
		return m.AInt64
	}
	return 0
}

func (m *NestedMessage) GetAUint32() uint32 {
	if m != nil {
		return m.AUint32
	}
	return 0
}

func (m *NestedMessage) GetAUint64() uint64 {
	if m != nil {
		return m.AUint64
	}
	return 0
}

func (m *NestedMessage) GetASint32() int32 {
	if m != nil {
		return m.ASint32
	}
	return 0
}

func (m *NestedMessage) GetASint64() int64 {
	if m != nil {
		return m.ASint64
	}
	return 0
}

func (m *NestedMessage) GetAFixed32() uint32 {
	if m != nil {
		return m.AFixed32
	}
	return 0
}

func (m *NestedMessage) GetAFixed64() uint64 {
	if m != nil {
		return m.AFixed64
	}
	return 0
}

func (m *NestedMessage) GetASfixed32() int32 {
	if m != nil {
		return m.ASfixed32
	}
	return 0
}

func (m *NestedMessage) GetASfixed64() int64 {
	if m != nil {
		return m.ASfixed64
	}
	return 0
}

func (m *NestedMessage) GetABool() bool {
	if m != nil {
		return m.ABool
	}
	return false
}

func (m *NestedMessage) GetAString() string {
	if m != nil {
		return m.AString
	}
	return ""
}

func (m *NestedMessage) GetABytes() []byte {
	if m != nil {
		return m.ABytes
	}
	return nil
}

func (m *NestedMessage) GetADouble() float64 {
	if m != nil {
		return m.ADouble
	}
	return 0
}

func (m *NestedMessage) GetAFloat() float32 {
	if m != nil {
		return m.AFloat
	}
	return 0
}

func init() {
	proto.RegisterType((*TestMessage)(nil), "schematest.TestMessage")
	proto.RegisterType((*NestedMessage)(nil), "schematest.NestedMessage")
	proto.RegisterEnum("schematest.TestMessage_Corpus", TestMessage_Corpus_name, TestMessage_Corpus_value)
}
func (m *TestMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AInt32 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AInt32))
	}
	if m.AInt64 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AInt64))
	}
	if m.AUint32 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AUint32))
	}
	if m.AUint64 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AUint64))
	}
	if m.ASint32 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMain(dAtA, i, uint64((uint32(m.ASint32)<<1)^uint32((m.ASint32>>31))))
	}
	if m.ASint64 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMain(dAtA, i, uint64((uint64(m.ASint64)<<1)^uint64((m.ASint64>>63))))
	}
	if m.AFixed32 != 0 {
		dAtA[i] = 0x3d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.AFixed32))
		i += 4
	}
	if m.AFixed64 != 0 {
		dAtA[i] = 0x41
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AFixed64))
		i += 8
	}
	if m.ASfixed32 != 0 {
		dAtA[i] = 0x4d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ASfixed32))
		i += 4
	}
	if m.ASfixed64 != 0 {
		dAtA[i] = 0x51
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ASfixed64))
		i += 8
	}
	if m.ABool {
		dAtA[i] = 0x58
		i++
		if m.ABool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AString) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.AString)))
		i += copy(dAtA[i:], m.AString)
	}
	if len(m.ABytes) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.ABytes)))
		i += copy(dAtA[i:], m.ABytes)
	}
	if m.ADouble != 0 {
		dAtA[i] = 0x71
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ADouble))))
		i += 8
	}
	if m.AFloat != 0 {
		dAtA[i] = 0x7d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AFloat))))
		i += 4
	}
	if len(m.AnArrayString) > 0 {
		for _, s := range m.AnArrayString {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AMapOfInt32) > 0 {
		for k, _ := range m.AMapOfInt32 {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			v := m.AMapOfInt32[k]
			mapSize := 1 + len(k) + sovMain(uint64(len(k))) + 1 + sovMain(uint64(v))
			i = encodeVarintMain(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMain(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintMain(dAtA, i, uint64(v))
		}
	}
	if len(m.AMapOfNested) > 0 {
		for k, _ := range m.AMapOfNested {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			v := m.AMapOfNested[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMain(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMain(uint64(len(k))) + msgSize
			i = encodeVarintMain(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMain(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMain(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.ANestedMessage != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.ANestedMessage.Size()))
		n2, err := m.ANestedMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.AnImportedMessage != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AnImportedMessage.Size()))
		n3, err := m.AnImportedMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.AnEnum != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AnEnum))
	}
	return i, nil
}

func (m *NestedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AInt32 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AInt32))
	}
	if m.AInt64 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AInt64))
	}
	if m.AUint32 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AUint32))
	}
	if m.AUint64 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.AUint64))
	}
	if m.ASint32 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMain(dAtA, i, uint64((uint32(m.ASint32)<<1)^uint32((m.ASint32>>31))))
	}
	if m.ASint64 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMain(dAtA, i, uint64((uint64(m.ASint64)<<1)^uint64((m.ASint64>>63))))
	}
	if m.AFixed32 != 0 {
		dAtA[i] = 0x3d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.AFixed32))
		i += 4
	}
	if m.AFixed64 != 0 {
		dAtA[i] = 0x41
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AFixed64))
		i += 8
	}
	if m.ASfixed32 != 0 {
		dAtA[i] = 0x4d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ASfixed32))
		i += 4
	}
	if m.ASfixed64 != 0 {
		dAtA[i] = 0x51
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ASfixed64))
		i += 8
	}
	if m.ABool {
		dAtA[i] = 0x58
		i++
		if m.ABool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AString) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.AString)))
		i += copy(dAtA[i:], m.AString)
	}
	if len(m.ABytes) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.ABytes)))
		i += copy(dAtA[i:], m.ABytes)
	}
	if m.ADouble != 0 {
		dAtA[i] = 0x71
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ADouble))))
		i += 8
	}
	if m.AFloat != 0 {
		dAtA[i] = 0x7d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AFloat))))
		i += 4
	}
	return i, nil
}

func encodeVarintMain(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestMessage) Size() (n int) {
	var l int
	_ = l
	if m.AInt32 != 0 {
		n += 1 + sovMain(uint64(m.AInt32))
	}
	if m.AInt64 != 0 {
		n += 1 + sovMain(uint64(m.AInt64))
	}
	if m.AUint32 != 0 {
		n += 1 + sovMain(uint64(m.AUint32))
	}
	if m.AUint64 != 0 {
		n += 1 + sovMain(uint64(m.AUint64))
	}
	if m.ASint32 != 0 {
		n += 1 + sozMain(uint64(m.ASint32))
	}
	if m.ASint64 != 0 {
		n += 1 + sozMain(uint64(m.ASint64))
	}
	if m.AFixed32 != 0 {
		n += 5
	}
	if m.AFixed64 != 0 {
		n += 9
	}
	if m.ASfixed32 != 0 {
		n += 5
	}
	if m.ASfixed64 != 0 {
		n += 9
	}
	if m.ABool {
		n += 2
	}
	l = len(m.AString)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.ABytes)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.ADouble != 0 {
		n += 9
	}
	if m.AFloat != 0 {
		n += 5
	}
	if len(m.AnArrayString) > 0 {
		for _, s := range m.AnArrayString {
			l = len(s)
			n += 2 + l + sovMain(uint64(l))
		}
	}
	if len(m.AMapOfInt32) > 0 {
		for k, v := range m.AMapOfInt32 {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMain(uint64(len(k))) + 1 + sovMain(uint64(v))
			n += mapEntrySize + 2 + sovMain(uint64(mapEntrySize))
		}
	}
	if len(m.AMapOfNested) > 0 {
		for k, v := range m.AMapOfNested {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMain(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMain(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMain(uint64(mapEntrySize))
		}
	}
	if m.ANestedMessage != nil {
		l = m.ANestedMessage.Size()
		n += 2 + l + sovMain(uint64(l))
	}
	if m.AnImportedMessage != nil {
		l = m.AnImportedMessage.Size()
		n += 2 + l + sovMain(uint64(l))
	}
	if m.AnEnum != 0 {
		n += 2 + sovMain(uint64(m.AnEnum))
	}
	return n
}

func (m *NestedMessage) Size() (n int) {
	var l int
	_ = l
	if m.AInt32 != 0 {
		n += 1 + sovMain(uint64(m.AInt32))
	}
	if m.AInt64 != 0 {
		n += 1 + sovMain(uint64(m.AInt64))
	}
	if m.AUint32 != 0 {
		n += 1 + sovMain(uint64(m.AUint32))
	}
	if m.AUint64 != 0 {
		n += 1 + sovMain(uint64(m.AUint64))
	}
	if m.ASint32 != 0 {
		n += 1 + sozMain(uint64(m.ASint32))
	}
	if m.ASint64 != 0 {
		n += 1 + sozMain(uint64(m.ASint64))
	}
	if m.AFixed32 != 0 {
		n += 5
	}
	if m.AFixed64 != 0 {
		n += 9
	}
	if m.ASfixed32 != 0 {
		n += 5
	}
	if m.ASfixed64 != 0 {
		n += 9
	}
	if m.ABool {
		n += 2
	}
	l = len(m.AString)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.ABytes)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.ADouble != 0 {
		n += 9
	}
	if m.AFloat != 0 {
		n += 5
	}
	return n
}

func sovMain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMain(x uint64) (n int) {
	return sovMain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AInt32", wireType)
			}
			m.AInt32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AInt32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AInt64", wireType)
			}
			m.AInt64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AInt64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AUint32", wireType)
			}
			m.AUint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AUint32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AUint64", wireType)
			}
			m.AUint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AUint64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ASint32 = v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASint64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ASint64 = int64(v)
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFixed32", wireType)
			}
			m.AFixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.AFixed32 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFixed64", wireType)
			}
			m.AFixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AFixed64 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASfixed32", wireType)
			}
			m.ASfixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ASfixed32 = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASfixed64", wireType)
			}
			m.ASfixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ASfixed64 = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ABool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ABool = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ABytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ABytes = append(m.ABytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ABytes == nil {
				m.ABytes = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADouble", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ADouble = float64(math.Float64frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFloat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AFloat = float32(math.Float32frombits(v))
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnArrayString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnArrayString = append(m.AnArrayString, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AMapOfInt32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AMapOfInt32 == nil {
				m.AMapOfInt32 = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AMapOfInt32[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AMapOfNested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AMapOfNested == nil {
				m.AMapOfNested = make(map[string]*NestedMessage)
			}
			var mapkey string
			var mapvalue *NestedMessage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMain
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMain
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NestedMessage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AMapOfNested[mapkey] = mapvalue
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ANestedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ANestedMessage == nil {
				m.ANestedMessage = &NestedMessage{}
			}
			if err := m.ANestedMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnImportedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnImportedMessage == nil {
				m.AnImportedMessage = &ImportedMessage{}
			}
			if err := m.AnImportedMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnEnum", wireType)
			}
			m.AnEnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnEnum |= (TestMessage_Corpus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AInt32", wireType)
			}
			m.AInt32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AInt32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AInt64", wireType)
			}
			m.AInt64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AInt64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AUint32", wireType)
			}
			m.AUint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AUint32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AUint64", wireType)
			}
			m.AUint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AUint64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ASint32 = v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASint64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ASint64 = int64(v)
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFixed32", wireType)
			}
			m.AFixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.AFixed32 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFixed64", wireType)
			}
			m.AFixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AFixed64 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASfixed32", wireType)
			}
			m.ASfixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ASfixed32 = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASfixed64", wireType)
			}
			m.ASfixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ASfixed64 = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ABool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ABool = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ABytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ABytes = append(m.ABytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ABytes == nil {
				m.ABytes = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADouble", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ADouble = float64(math.Float64frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFloat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AFloat = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMain   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/dbnode/generated/proto/schematest/main.proto", fileDescriptorMain)
}

var fileDescriptorMain = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0xcd, 0x6e, 0xfa, 0x46,
	0x14, 0xc5, 0x33, 0x18, 0x6c, 0x3c, 0x7c, 0x99, 0x49, 0xa2, 0x3a, 0x89, 0x8a, 0x46, 0x59, 0x54,
	0xd3, 0x0d, 0x96, 0xc0, 0x72, 0xab, 0x2e, 0x2a, 0x01, 0x21, 0x11, 0x6a, 0x08, 0xd1, 0x90, 0x0f,
	0x29, 0x1b, 0xeb, 0x12, 0x0f, 0x04, 0x15, 0xdb, 0xc8, 0x36, 0x55, 0x79, 0x8b, 0x3e, 0x44, 0xd7,
	0x7d, 0x8e, 0x2e, 0xfb, 0x08, 0x55, 0xfa, 0x22, 0x15, 0xb6, 0x01, 0x27, 0x6d, 0xb3, 0xe8, 0xea,
	0xbf, 0xf8, 0xef, 0x38, 0xf7, 0xdc, 0xf3, 0xf3, 0x70, 0xaf, 0x3d, 0xb8, 0x37, 0x9b, 0x47, 0x2f,
	0xab, 0x49, 0xf3, 0xd9, 0x77, 0x0d, 0xb7, 0xed, 0x4c, 0x0c, 0xb7, 0x6d, 0x84, 0xc1, 0xb3, 0xe1,
	0x4c, 0x3c, 0xdf, 0x11, 0xc6, 0x4c, 0x78, 0x22, 0x80, 0x48, 0x38, 0xc6, 0x32, 0xf0, 0x23, 0xdf,
	0x08, 0x9f, 0x5f, 0x84, 0x0b, 0x91, 0x08, 0x23, 0xc3, 0x85, 0xb9, 0xd7, 0x8c, 0xab, 0x04, 0xef,
	0xcb, 0xa7, 0x57, 0xff, 0x1b, 0x38, 0x77, 0x97, 0x7e, 0x10, 0x09, 0x27, 0x81, 0x9e, 0xff, 0x56,
	0xc4, 0xa5, 0x3b, 0x11, 0x46, 0x43, 0x11, 0x86, 0x30, 0x13, 0xe4, 0x0b, 0xac, 0x80, 0x3d, 0xf7,
	0xa2, 0x76, 0x4b, 0x47, 0x14, 0xb1, 0x02, 0x97, 0x61, 0xb0, 0x51, 0x3b, 0xc3, 0x32, 0xf5, 0x1c,
	0x45, 0x4c, 0x4a, 0x0c, 0xcb, 0x24, 0x27, 0xb8, 0x08, 0xf6, 0x2a, 0x89, 0x48, 0x14, 0xb1, 0x0a,
	0x57, 0xe0, 0x3e, 0x96, 0x7b, 0xcb, 0x32, 0xf5, 0x3c, 0x45, 0x2c, 0x9f, 0x5a, 0xdb, 0x54, 0x98,
	0xa4, 0x0a, 0x14, 0xb1, 0x3a, 0x57, 0x60, 0x9c, 0x49, 0x85, 0x49, 0x4a, 0xa6, 0x88, 0x91, 0xd4,
	0xb2, 0x4c, 0x72, 0x86, 0x55, 0xb0, 0xa7, 0xf3, 0x9f, 0x85, 0xd3, 0x6e, 0xe9, 0x0a, 0x45, 0x4c,
	0xe1, 0x45, 0xb8, 0x4c, 0x74, 0xc6, 0xb4, 0x4c, 0xbd, 0x48, 0x11, 0x93, 0xb7, 0xa6, 0x65, 0x92,
	0x2f, 0x31, 0x06, 0x3b, 0xdc, 0x46, 0x55, 0x8a, 0x58, 0x8d, 0xab, 0x30, 0x4e, 0x0b, 0x59, 0xdb,
	0x32, 0x75, 0x4c, 0x11, 0xd3, 0x76, 0xb6, 0x65, 0x92, 0x63, 0x2c, 0x83, 0x3d, 0xf1, 0xfd, 0x85,
	0x5e, 0xa2, 0x88, 0x15, 0x79, 0x01, 0xba, 0xbe, 0xbf, 0x48, 0x4f, 0x1a, 0x05, 0x73, 0x6f, 0xa6,
	0x97, 0x29, 0x62, 0xea, 0xe6, 0xa4, 0xb1, 0x4c, 0xc6, 0x35, 0x59, 0x47, 0x22, 0xd4, 0x2b, 0x14,
	0xb1, 0x32, 0x97, 0xa1, 0xbb, 0x51, 0x49, 0xc6, 0xf1, 0x57, 0x93, 0x85, 0xd0, 0xab, 0x14, 0x31,
	0xc4, 0x15, 0xb8, 0x88, 0x65, 0x92, 0x99, 0x2e, 0x7c, 0x88, 0xf4, 0x1a, 0x45, 0x2c, 0xc7, 0x65,
	0xb8, 0xdc, 0x28, 0xf2, 0x15, 0xae, 0x81, 0x67, 0x43, 0x10, 0xc0, 0x7a, 0xfb, 0x38, 0x8d, 0x4a,
	0x4c, 0xe5, 0x15, 0xf0, 0x3a, 0x9b, 0x6a, 0xfa, 0xd0, 0x21, 0xae, 0x82, 0xed, 0xc2, 0xd2, 0xf6,
	0xa7, 0xe9, 0x0e, 0xeb, 0x54, 0x62, 0xa5, 0x16, 0x6b, 0xee, 0x5f, 0x80, 0x66, 0x66, 0xdb, 0xcd,
	0xce, 0x10, 0x96, 0xa3, 0x69, 0xbc, 0xe0, 0xbe, 0x17, 0x05, 0x6b, 0x5e, 0x82, 0x7d, 0x85, 0xdc,
	0xe2, 0xda, 0x0e, 0xe7, 0x89, 0x30, 0x12, 0x8e, 0x4e, 0x62, 0xde, 0xd7, 0x1f, 0xf3, 0x6e, 0xe2,
	0xde, 0x04, 0x58, 0x86, 0x4c, 0x89, 0xf4, 0xb0, 0x06, 0x29, 0xca, 0x76, 0x93, 0x8c, 0x7e, 0x48,
	0x11, 0x2b, 0xb5, 0x4e, 0xb2, 0xc8, 0xa4, 0x3b, 0x85, 0xf2, 0x2a, 0xbc, 0xd1, 0xe4, 0x07, 0x7c,
	0x08, 0x9e, 0xbd, 0x7d, 0x8f, 0x77, 0x9c, 0xa3, 0x98, 0x73, 0x96, 0xe5, 0x0c, 0xd2, 0x9e, 0x2d,
	0xa9, 0x0e, 0xde, 0xbb, 0x12, 0xf9, 0x06, 0x2b, 0xe0, 0xd9, 0xc2, 0x5b, 0xb9, 0xfa, 0x31, 0x45,
	0xac, 0xda, 0x6a, 0xfc, 0xd7, 0x7f, 0xeb, 0xf9, 0xc1, 0x72, 0x15, 0x72, 0x19, 0xbc, 0xbe, 0xb7,
	0x72, 0x4f, 0xbf, 0xc7, 0xda, 0xfb, 0xe9, 0x11, 0x0d, 0x4b, 0x3f, 0x8a, 0x75, 0xfc, 0xe1, 0xa8,
	0x7c, 0xf3, 0x93, 0x1c, 0xe1, 0xc2, 0x4f, 0xb0, 0x58, 0x89, 0xf8, 0x9b, 0x29, 0xf0, 0x44, 0x7c,
	0x97, 0xfb, 0x16, 0x9d, 0x3e, 0xe1, 0xfa, 0x3f, 0xa6, 0xf5, 0x2f, 0x00, 0x23, 0x0b, 0xf8, 0x70,
	0x4c, 0x7b, 0xf6, 0xf9, 0x13, 0x96, 0x93, 0xd3, 0x92, 0x0a, 0x56, 0xef, 0x6f, 0x06, 0x0f, 0x7d,
	0x3e, 0xee, 0x5c, 0x6b, 0x07, 0x44, 0xc1, 0xd2, 0x63, 0xbf, 0xab, 0x21, 0x82, 0xb1, 0x3c, 0x18,
	0x76, 0xae, 0xfa, 0x63, 0x2d, 0x47, 0x54, 0x5c, 0xb8, 0x1e, 0xf5, 0x3a, 0xd7, 0x9a, 0x44, 0x8a,
	0x38, 0x7f, 0xd3, 0x7f, 0x1c, 0x6b, 0x79, 0x52, 0xc6, 0xc5, 0x5b, 0x3e, 0xba, 0xb8, 0xef, 0xdd,
	0x8d, 0xb5, 0xc2, 0xa6, 0xe5, 0x61, 0x70, 0xd1, 0x1f, 0x69, 0xf2, 0xf9, 0xaf, 0x12, 0xae, 0xbc,
	0xdd, 0xc7, 0xe7, 0x2b, 0xe3, 0xd3, 0xbb, 0x32, 0xba, 0xda, 0xef, 0xaf, 0x0d, 0xf4, 0xc7, 0x6b,
	0x03, 0xfd, 0xf9, 0xda, 0x40, 0xbf, 0xfc, 0xd5, 0x38, 0x98, 0xc8, 0xf1, 0x85, 0xdf, 0xfe, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0xae, 0xec, 0x11, 0x4b, 0x8c, 0x06, 0x00, 0x00,
}
