// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../persist/fs/fs.go

package mocks

import (
	time "time"

	time0 "code.uber.internal/infra/memtsdb/x/time"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *_MockWriterRecorder
}

// Recorder for MockWriter (not exported)
type _MockWriterRecorder struct {
	mock *MockWriter
}

func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &_MockWriterRecorder{mock}
	return mock
}

func (_m *MockWriter) EXPECT() *_MockWriterRecorder {
	return _m.recorder
}

func (_m *MockWriter) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockWriterRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockWriter) Open(shard uint32, start time.Time) error {
	ret := _m.ctrl.Call(_m, "Open", shard, start)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockWriterRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open", arg0, arg1)
}

func (_m *MockWriter) Write(key string, data []byte) error {
	ret := _m.ctrl.Call(_m, "Write", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockWriterRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1)
}

func (_m *MockWriter) WriteAll(key string, data [][]byte) error {
	ret := _m.ctrl.Call(_m, "WriteAll", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockWriterRecorder) WriteAll(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteAll", arg0, arg1)
}

// Mock of Reader interface
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *_MockReaderRecorder
}

// Recorder for MockReader (not exported)
type _MockReaderRecorder struct {
	mock *MockReader
}

func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &_MockReaderRecorder{mock}
	return mock
}

func (_m *MockReader) EXPECT() *_MockReaderRecorder {
	return _m.recorder
}

func (_m *MockReader) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockReaderRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockReader) Open(shard uint32, start time.Time) error {
	ret := _m.ctrl.Call(_m, "Open", shard, start)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockReaderRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open", arg0, arg1)
}

func (_m *MockReader) Read() (string, []byte, error) {
	ret := _m.ctrl.Call(_m, "Read")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockReaderRecorder) Read() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read")
}

func (_m *MockReader) Range() time0.Range {
	ret := _m.ctrl.Call(_m, "Range")
	ret0, _ := ret[0].(time0.Range)
	return ret0
}

func (_mr *_MockReaderRecorder) Range() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Range")
}

func (_m *MockReader) Entries() int {
	ret := _m.ctrl.Call(_m, "Entries")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockReaderRecorder) Entries() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Entries")
}

func (_m *MockReader) EntriesRead() int {
	ret := _m.ctrl.Call(_m, "EntriesRead")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockReaderRecorder) EntriesRead() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EntriesRead")
}
