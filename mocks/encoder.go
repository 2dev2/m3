// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../encoding.go

package mocks

import (
	io "io"
	time0 "time"

	"code.uber.internal/infra/memtsdb"
	time "code.uber.internal/infra/memtsdb/x/time"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Encoder interface
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *_MockEncoderRecorder
}

// Recorder for MockEncoder (not exported)
type _MockEncoderRecorder struct {
	mock *MockEncoder
}

func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &_MockEncoderRecorder{mock}
	return mock
}

func (_m *MockEncoder) EXPECT() *_MockEncoderRecorder {
	return _m.recorder
}

func (_m *MockEncoder) Encode(dp memtsdb.Datapoint, timeUnit time.Unit, annotation memtsdb.Annotation) error {
	ret := _m.ctrl.Call(_m, "Encode", dp, timeUnit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEncoderRecorder) Encode(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encode", arg0, arg1, arg2)
}

func (_m *MockEncoder) Stream() memtsdb.SegmentReader {
	ret := _m.ctrl.Call(_m, "Stream")
	ret0, _ := ret[0].(memtsdb.SegmentReader)
	return ret0
}

func (_mr *_MockEncoderRecorder) Stream() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stream")
}

func (_m *MockEncoder) Done() {
	_m.ctrl.Call(_m, "Done")
}

func (_mr *_MockEncoderRecorder) Done() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Done")
}

func (_m *MockEncoder) Reset(t time0.Time, capacity int) {
	_m.ctrl.Call(_m, "Reset", t, capacity)
}

func (_mr *_MockEncoderRecorder) Reset(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0, arg1)
}

func (_m *MockEncoder) ResetSetData(t time0.Time, data []byte, writable bool) {
	_m.ctrl.Call(_m, "ResetSetData", t, data, writable)
}

func (_mr *_MockEncoderRecorder) ResetSetData(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetSetData", arg0, arg1, arg2)
}

func (_m *MockEncoder) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockEncoderRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of Iterator interface
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockIteratorRecorder
}

// Recorder for MockIterator (not exported)
type _MockIteratorRecorder struct {
	mock *MockIterator
}

func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &_MockIteratorRecorder{mock}
	return mock
}

func (_m *MockIterator) EXPECT() *_MockIteratorRecorder {
	return _m.recorder
}

func (_m *MockIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockIterator) Current() (memtsdb.Datapoint, time.Unit, memtsdb.Annotation) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(memtsdb.Datapoint)
	ret1, _ := ret[1].(time.Unit)
	ret2, _ := ret[2].(memtsdb.Annotation)
	return ret0, ret1, ret2
}

func (_mr *_MockIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockIterator) Reset(reader io.Reader) {
	_m.ctrl.Call(_m, "Reset", reader)
}

func (_mr *_MockIteratorRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

func (_m *MockIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of Decoder interface
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *_MockDecoderRecorder
}

// Recorder for MockDecoder (not exported)
type _MockDecoderRecorder struct {
	mock *MockDecoder
}

func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &_MockDecoderRecorder{mock}
	return mock
}

func (_m *MockDecoder) EXPECT() *_MockDecoderRecorder {
	return _m.recorder
}

func (_m *MockDecoder) Decode(r io.Reader) memtsdb.Iterator {
	ret := _m.ctrl.Call(_m, "Decode", r)
	ret0, _ := ret[0].(memtsdb.Iterator)
	return ret0
}

func (_mr *_MockDecoderRecorder) Decode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decode", arg0)
}
